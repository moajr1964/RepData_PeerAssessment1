dd<-as.date(dd,"%d%b%Y")
dd<-as.Date(dd,"%d%b%Y")
dd
dd<-grep("2012",sampleTimes,value=TRUE)
dd
dd<-as.Date(dd,"%Y%m%d")
dd
dd<-grep("2012",sampleTimes,value=TRUE)
class(dd)
dd<-as.Date(dd,"%d%m%Y")
class(dd)
dd
weekdays(sampleTimes)
dd<-grep("2012",sampleTimes,value=TRUE)
length(dd) #250
class(dd)
dd<-grep("2012",as.character(sampleTimes),value=TRUE)
length(dd) #250
class(dd)
dd
dd<-as.Date(dd,"%d%m%Y")
dd
dd<-grep("2012",as.character(sampleTimes),value=TRUE)
length(dd) #250
class(dd)
dd
dd
class(dd)
dd<-as.Date(dd,"%d%m%Y")
dd
dd<-grep("2012",as.character(sampleTimes),value=TRUE)
dd<-as.Date(dd)#,"%d%m%Y")
class(dd)
dd
grep("segunda-feira",weekdays(dd))
length(grep("segunda-feira",weekdays(dd)))
mergedData[,19]
mergedData<-  mergedData[!Q2[,19]=="",]
mergedData<-  mergedData[!mergedData[,19]=="",]
mergedData[,19]
str(mergedData)
str(mergedData[,19])
ff<-grep("June", mergedData[,19],value=TRUE)
ff
grep("June", mergedData[,19],value=FALSE)
ff
grep("Fiscal year end", ff,value=FALSE)
grep("Fiscal year end", ff,value=TRUE)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
airquality<-transform(airqulity, Month = factor(Month))
airquality<-transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(2,3))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
set.seed(10)
x<-rnorm(100)
f<-rep(0:1, each=50)
y<-x+f-f*x+rnorm(100, sd=0.5)
f<-factor(f, labels=c("Group 1","Group 1"))
xyplot(y~x|layout=c(2,1))
xyplot(y~x|f,layout=c(2,1))
f<-factor(f, labels=c("Group 1","Group 2"))
xyplot(y~x|f,layout=c(2,1))
xyplot(y ~ x | f,layout=c(2,1))
f
f<-factor(f, labels=c("Group 1","Group 2"))
f
f<-rep(0:1, each=50)
f
f<-factor(f, labels=c("Group 1","Group 2"))
f
xyplot(y ~ x | f,layout=c(2,1))
xyplot(y ~ x | f, panel=function(x,y,...) {
panel.xyplot(x,y,...)
panel.abline(h=median(y), lty=2)
})
xyplot(y ~ x | f, panel=function(x,y,...) {
panel.xyplot(x,y,...)
panel.lmline(x,y, col=2)
})
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
?trellis.par.set()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
str(mpg)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix<-matrix(rnorm(400), nrow=40)
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar=rep(0.2,4))
heatmap(datamatrix)
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (flipCoin){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0.3),each=5)
}
}
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (coinFlip){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0.3),each=5)
}
}
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (coinFlip){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0.3),each=5)
}
}
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (coinFlip){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0, 3),each=5)
}
}
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
hh<-hclust(dist(dataMatrix))
dataMatrixOrdered<-dataMatrix[hh$order,]
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row Mean", ylab="Row",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column", ylab="Column Mean",pch=19)
par(mfrow=c(1,3), mar=c(2,4,0.1,0.1))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row Mean", ylab="Row",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column", ylab="Column Mean",pch=19)
par(mfrow=c(1,3), mar=c(4,5,2,2))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row Mean", ylab="Row",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column", ylab="Column Mean",pch=19)
library(kernLab)
library(kernlab)
library(Kernlab)
install.packages("kernlab")
library(Kernlab)
library(Kernlab)
data(spam)
library(Kernlab)
library("Kernlab")
library(Kernlab)
install.packages("kernlab")
library(Kernlab)
data(spam)
library(Kernlab)
str(spam[,1:5])
setwd("c:/Users/Moacyr/Dropbox/week2_reproducibleResearch/RepData_PeerAssessment1/activity")
activity<-read.csv("activity.csv", header=TRUE, colClasses=c("integer", "character", "integer"))
activityCleaned<-subset(activity, steps!="NA")
hist (activity$steps, main="Histogram\n Number of Steps", col="red")
resultMean<-aggregate(activityCleaned$steps ~ activityCleaned$date, FUN = mean, data=activityCleaned)
resultMedian<-aggregate(activityCleaned$steps ~ activityCleaned$date, FUN = median, data=activityCleaned)
FinalResult<-data.frame(cbind(resultMean,resultMedian[,2]))
names(FinalResult)<-c("Date", "Mean", "Median")
total<-sum(is.na(activity$steps))
stepsFilled<-replace(activity$steps, is.na(activity$steps), mean(activity$steps, na.rm=TRUE))
newActivity<-as.data.frame(cbind(as.numeric(stepsFilled), activity$date))
names(newActivity)<-c("DateFilled", "Date")
head(newActivity)
hist (as.numeric(newActivity[,1]), main="Histogram\n Number of Steps\n filled by global Mean",xlab="# of Steps", col="blue")
resultMeanF<-aggregate(as.numeric(newActivity[,1]) ~ newActivity[,2], FUN = mean, data=newActivity)
resultMedianF<-aggregate(as.numeric(newActivity[,1]) ~ newActivity[,2], FUN = median, data=newActivity)
FinalResultF<-data.frame(cbind(resultMeanF,resultMedianF[,2]))
names(FinalResultF)<-c("Date", "Mean", "Median")
newActivity[,2]<-as.Date(as.character(newActivity[,2]))
newActivity[,1]<-as.numeric(as.character(newActivity[,1]))
fVector<-c(rep("weekday",9504),rep("weekend",8064))
fVector<-as.factor(fVector)
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
?weekday()
?weekdays()
newActivity<-as.data.frame(cbind(as.numeric(stepsFilled), activity$date, activity$interval))
names(newActivity)<-c("DateFilled", "Date", "interval")
head(newActivity)
str(newActivity)
newActivity[,3]<-as.numeric(as.character(newActivity[,3]))
str(newActivity)
newActivity[,2]<-as.Date(as.character(newActivity[,2]))
newActivity[,1]<-as.numeric(as.character(newActivity[,1]))
str(newActivity)
fVector<-c(rep("weekday",9504),rep("weekend",8064))
fVector<-as.factor(fVector)
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
plot(newDataFrame$interval,newDataFrame$DateFilled, type="l")
library(gplot)
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ newDataFrame[,4]) + geom_smooth()
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ newDataFrame[,4])
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame)
?qplot
newDataFrame[,4]
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ newDataFrame[,4])
str(newDataFrame)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ newDataFrame$fVector)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = newDataFrame$fVector ~ .)
a
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = newDataFrame$fVector ~ .)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = newDataFrame$fVector ~)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = newDataFrame$fVector ~)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = newDataFrame$fVector)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = newDataFrame$fVector, newDataFrame$Date)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = newDataFrame$fVector, newDataFrame$Date)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ newDataFrame$fVector)
library(datasets)
qplot(displ, hwy,data=mpg, facets=.~drv)
qplot(displ, hwy,data=mpg, facets=drv~.,binwidth=2)
qplot(hwy,data=mpg, facets=drv~.,binwidth=2,col=drv)
qplot(displ,data=mpg, facets=drv~.,binwidth=2,col=drv)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ factor(newDataFrame$fVector))
g<-ggplot(movies, aes(votes, rating))
g + geom_point(alpha=1/6)
+ labs(title="TESTE")
+ geom_smooth(method="lm")
+ facet_wrap(mpaa ~ year)
df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30))
df
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_point(data = ds, aes(y = mean),
colour = 'red', size = 3)
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
library(plyr)
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_point(data = ds, aes(y = mean),
colour = 'red', size = 3)
ggplot(df) +
geom_point(aes(x = gp, y = y)) +
geom_point(data = ds, aes(x = gp, y = mean),
colour = 'red', size = 3)
ggplot() +
geom_point(data = df, aes(x = gp, y = y)) +
geom_point(data = ds, aes(x = gp, y = mean),
colour = 'red', size = 3) +
geom_errorbar(data = ds, aes(x = gp, y = mean,
ymin = mean - sd, ymax = mean + sd),
colour = 'red', width = 0.4)
qplot(diamonds$carat, diamonds$price)
qplot(carat, price, data = diamonds,
colour=clarity)
qplot(carat, price, data = diamonds,
geom=c("point", "smooth"), method=lm)
qplot(carat, data = diamonds,
geom="histogram")
qplot(carat, data = diamonds,
qplot(diamonds$carat, diamonds$price)
p <- ggplot(diamonds, aes(x=carat,y=price))
p + geom_point(aes(colour = "green"))
p + geom_point(colour = "green")
p + geom_point(colour = colour)
p <- ggplot(diamonds, aes(x=carat,y=price))
p + geom_point(aes(colour = "green"))
p + geom_point(colour = "green")
p + geom_point(colour = colour)
p + geom_point(aes(colour = "green"))
p <- ggplot(diamonds, aes(x=price))
p + geom_histogram()
p + stat_bin(geom="area")
p + stat_bin(geom="point")
p + stat_bin(geom="line")
p + geom_histogram(aes(fill = clarity))
p + geom_histogram(aes(y = ..density..))
str(airquality)
str(newDataFrame)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ newDataFrame$fVector)
qplot(newDataFrame$interval,newDataFrame$DateFilled, data=newDataFrame, facets = . ~ factor(newDataFrame$Date)
)
plot(activity$interval, activity$steps)
plot(activity$interval, activity$steps, type="l")
plot(activity$interval, mean(activity$steps), type="l")
plot(activity$interval, activity$steps, type="l")
plot(activity$interval, activity$steps, type="l", main="Time Series \nAverage # steps VS 5-minute interval")
plot(activity$interval, activity$steps, type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="# of steps", xlab="5-min interval")
plot(activity$interval, activity$steps, type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
activity[1:10,]
activity[1:100,]
activityCleaned[1:100,]
activityCleaned<-subset(activity, steps!="NA")
head(activityCleaned)
activityCleaned[1:100,]
activityCleaned[,]
tail(activityCleaned[,])
tail(activityCleaned[,],10)
tail(activityCleaned[,],20)
head(activityCleaned[,],20)
head(activityCleaned[,],40)
head(activityCleaned[,],60)
head(activityCleaned[,],80)
head(activityCleaned[,],90)
tail(activityCleaned[,])
head(activityCleaned[,])
str(activityCleaned)
head(activityCleaned[,])
?aggregate
teste<-aggregate(activityCleaned$steps ~ activityCleaned$date + acitivityCleaned$interval, FUN = mean, data=activityCleaned)
teste<-aggregate(activityCleaned$steps ~ activityCleaned$date + activityCleaned$interval, FUN = mean, data=activityCleaned)
teste
head(teste)
head(teste,10)
head(teste,15)
head(teste,35)
str(teste)
plot(teste$interval, teste$steps, type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
head(teste,35)
str(teste)
plot(teste$activityCleaned$interval, teste$activityCleaned$steps, type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
teste
teste<-aggregate(activityCleaned$steps ~ activityCleaned$interval, FUN = mean, data=activityCleaned)
head(teste,35)
str(teste)
head(teste,35)
head(teste,15)
plot(teste$activityCleaned$interval, teste$activityCleaned$steps, type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
View(teste)
teste[,1]
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
teste[,2]
teste<-aggregate(activity$steps ~ activity$interval, FUN = mean, data=activity)
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
teste[,1]
teste[,2]
teste[,2]
max(teste[,2])
teste[,which(max(teste[,2]))]
teste[,(max(teste[,2])]
teste(max(teste[,2])
teste[max(teste[,2]]
max(teste[,2])
a[max(teste[,2]),]
teste[max(teste[,2]),]
teste[max(teste[,2]]
max(teste[,2])
?plot
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
abline(v=max(teste[,2],col = "blue",lty=2,lwd=2)
abline(v=max(teste[,2]),col = "blue",lty=2,lwd=2)
teste[max(teste[,2]),]
teste[max(teste[,2]),][1]
abline(v=teste[max(teste[,2]),][1],col = "blue",lty=2,lwd=2)
max(teste[,2])
teste[max(teste[,2]),]
teste[teste[,2]==max(teste[,2])]
teste[teste[,2]==max(teste[,2]),]
teste[teste[,2]==max(teste[,2]),][1]
abline(v=teste[teste[,2]==max(teste[,2]),][1],col = "blue",lty=2,lwd=2)
text(max(teste[,2])+10,200,"Máximo # steps:")
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
abline(v=teste[teste[,2]==max(teste[,2]),][1],col = "blue",lty=2,lwd=2)
text(teste[teste[,2]==max(teste[,2]),][1]+10,200,"Máximo # steps:")
text(teste[teste[,2]==max(teste[,2]),][1]+50,200,"Máximo # steps:")
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,"Máximo # steps:")
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
abline(v=teste[teste[,2]==max(teste[,2]),][1],col = "blue",lty=2,lwd=2)
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,"Máximo # steps:")
?text
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
abline(v=teste[teste[,2]==max(teste[,2]),][1],col = "blue",lty=2,lwd=2)
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,pos=1, "Máximo # steps:")
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,pos=4, "Máximo # steps:")
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,pos=4, paste("Máximo # steps:",teste[teste[,2]==max(teste[,2]),][1])
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
abline(v=teste[teste[,2]==max(teste[,2]),][1],col = "blue",lty=2,lwd=2)
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,pos=4, paste("Máximo # steps:",teste[teste[,2]==max(teste[,2]),][1])
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,pos=4,
paste("Máximo # steps:",teste[teste[,2]==max(teste[,2]),][1])
text(teste[teste[,2]==max(teste[,2]),][1]+150,200,pos=4,
paste("Máximo # steps:",teste[teste[,2]==max(teste[,2]),][1])
text(teste[teste[,2]==max(teste[,2]),][1],200,pos=4, "Máximo # steps:",teste[teste[,2]==max(teste[,2]),][1])
text(teste[teste[,2]==max(teste[,2]),][1],200,pos=4, "Máximo # steps:",teste[teste[,2]==max(teste[,2]),][1])
text(teste[teste[,2]==max(teste[,2]),][1],200, teste[teste[,2]==max(teste[,2]),][1])
text(teste[teste[,2]==max(teste[,2]),][1],200, teste[teste[,2]==max(teste[,2]),][1],pos=4)
plot(teste[,1], teste[,2], type="l", main="Time Series \nAverage # steps VS 5-minute interval",
ylab="Avg # of steps", xlab="5-min interval")
abline(v=teste[teste[,2]==max(teste[,2]),][1],col = "blue",lty=2,lwd=2)
text(teste[teste[,2]==max(teste[,2]),][1],200, teste[teste[,2]==max(teste[,2]),][1],pos=4)
?warnings()
?weekdays
weekdays(newActivity[,2])
moa<-weekdays(newActivity[,2])
moa
library(lattice)
xyplot(lnewDataFrame$interval~newDataFrame$stepFilled, data=newDataFrame, pch=".")
xyplot(newDataFrame$interval~newDataFrame$stepFilled, data=newDataFrame, pch=".")
xyplot(newDataFrame$interval~newDataFrame$stepFilled, data=newDataFrame)
xyplot(newDataFrame$interval~newDataFrame$stepFilled, data=newDataFrame)
?xyplot
xyplot(newDataFrame$interval~newDataFrame$stepFilled | newDataFrame$Date, data=newDataFrame)
str(newDataFrame)
qplot(newDataFrame$interval,newDataFrame$stepFilled, data=newDataFrame, facets = . ~ newDataFrame$fVector)
xyplot(newDataFrame$interval~newDataFrame$stepFilled | newDataFrame$fVector, data=newDataFrame)
xyplot(stepFilled ~ interval | newDataFrame$fVector, data=newDataFrame)
xyplot(stepFilled ~ interval | fVector, data=newDataFrame)
str(newDataFrame)
?xyplot
types <- c(types.plain, types.horiz)
xyplot(stepFilled ~ interval | gl(fVector), data=newDataFrame)
xyplot(stepFilled ~ interval | fVector, data=newDataFrame)
xyplot(stepFilled ~ interval , data=newDataFrame)
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
names(newActivity)<-c("stepFilled", "Date", "interval")
head(newActivity)
xyplot(stepFilled ~ interval , data=newDataFrame)
str(newDataFrame)
fVector<-c(rep("weekday",9504),rep("weekend",8064))
newActivity[,3]<-as.numeric(as.character(newActivity[,3]))
newActivity[,2]<-as.Date(as.character(newActivity[,2]))
newActivity[,1]<-as.numeric(as.character(newActivity[,1]))
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
xyplot(stepFilled ~ interval , data=newDataFrame)
xyplot(stepFilled ~ interval | fVector, data=newDataFrame)
?xyplot
xyplot(stepFilled ~ interval | fVector, data=newDataFrame, layout=c(1,2))
xyplot(stepFilled ~ interval | fVector, data=newDataFrame, layout=c(1,2), type="l")
avgWW <- aggregate(steps ~ interval, FUN = mean, data = newActivity)
str(newActivity)
avgWW <- aggregate(stepFilled ~ interval, FUN = mean, data = newActivity)
View(avgWW)
newDataFrameF<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrameF)
newDataFrameWeekdays<-subset(newDataFrameWeekdays, fVector=="weekday")
newDataFrameWeekdays<-subset(newDataFrameF, fVector=="weekday")
View(newDataFrameWeekdays)
newDataFrameWeekends<-subset(newDataFrameF, fVector=="weekend")
View(newDataFrameWeekends)
avgweekdays<-aggregate(stepFilled ~ $interval, FUN = mean, data = newDataFrameWeekdays)
avgweekdays<-aggregate(stepFilled ~ interval, FUN = mean, data = newDataFrameWeekdays)
View(avgweekdays)
avgweekends<-aggregate(stepFilled ~ interval, FUN = mean, data = newDataFrameWeekends)
View(avgweekends)
with(avgweekdays, plot(interval, stepFilled)
)
with(avgweekdays, plot(interval, stepFilled, type="l"))
par(mfrow = c(1, 2))
par(cex = 0.6)
par(mar = c(3, 3, 0, 0), oma = c(1, 1, 1, 1))
with(avgweekdays, plot(interval, stepFilled, type="l"))
par(mfrow = c(2, 1))
par(cex = 0.6)
par(mar = c(3, 3, 0, 0), oma = c(1, 1, 1, 1))
with(avgweekdays, plot(interval, stepFilled, type="l"))
with(avgweekdays, plot(interval, stepFilled, type="l", main="Weekdays",ylab="Avg Num.Steps"))
par(mfrow = c(2, 1))
par(cex = 0.6)
par(mar = c(4, 4, 2, 0), oma = c(1, 1, 1, 1))
with(avgweekdays, plot(interval, stepFilled, type="l", main="Weekdays",ylab="Avg Num.Steps"))
abline(v=avgweekdays[avgweekdays[,2]==max(avgweekdays[,2]),][1],col = "blue",lty=2,lwd=1)
with(avgweekends, plot(interval, stepFilled, type="l", main="Weekends",ylab="Avg Num.Steps"))
abline(v=avgweekends[avgweekends[,2]==max(avgweekends[,2]),][1],col = "blue",lty=2,lwd=1)
9504+8504
17568-9504
fVector<-c(rep("weekdays", 9504),rep("weekends", 8064))
fVector<-c(rep("weekdays", 9504),rep("weekends", 8064))
newActivity[,3]<-as.numeric(as.character(newActivity[,3]))
newActivity[,2]<-as.Date(as.character(newActivity[,2]))
newActivity[,1]<-as.numeric(as.character(newActivity[,1]))
newDataFrameF<-as.data.frame(cbind(newActivity, fVector))
# Creates 2 subsets, one for each "weekday" or "weekend"
newDataFrameWeekdays<-subset(newDataFrameF, fVector=="weekday")
newDataFrameWeekends<-subset(newDataFrameF, fVector=="weekend")
newDataFrameWeekdays
newDataFrameF<-as.data.frame(cbind(newActivity, fVector))
newDataFrameF
head(newDataFrameF)
dim(newActivity)
17568-9504
8064+9504
head(newDataFrameF)
newDataFrameWeekdays<-subset(newDataFrameF, fVector=="weekday")
newDataFrameWeekdays
?subset
fVector<-c(rep("weekday", 9504),rep("weekend", 8064))
newDataFrameF<-as.data.frame(cbind(newActivity, fVector))
newDataFrameWeekdays<-subset(newDataFrameF, fVector=="weekday")
newDataFrameWeekends<-subset(newDataFrameF, fVector=="weekend")
avgweekdays<-aggregate(stepFilled ~ interval, FUN = mean, data = newDataFrameWeekdays)
avgweekends<-aggregate(stepFilled ~ interval, FUN = mean, data = newDataFrameWeekends)
setwd("c:/Users/Moacyr/Dropbox/week2_reproducibleResearch/RepData_PeerAssessment1/activity")
