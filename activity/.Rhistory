Q2[1:20,5]
Q2<-  Q2[!Q2[,5]=="",]
Q2<-  Q2[!Q2[,5]=="(millions of",]
Q2<-  Q2[!Q2[,5]=="US dollars)",]
Q2<-  Q2[!Q2[,5]=="..",]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[1:20,5]
Q2[,5]
class(Q2[,5])
avg<-mean(as.numeric(gsub(",","",Q2[,5])))
avg
Q2[,5]<-as.numeric(Q2[,5])
Q2[,5]
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
Q2[,5]
Q2<-  Q2[!Q2[,5]=="",]
Q2<-  Q2[!Q2[,5]=="(millions of",]
Q2<-  Q2[!Q2[,5]=="US dollars)",]
Q2<-  Q2[!Q2[,5]=="..",]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[,5]
Q2[,5]<-as.numeric(Q2[,5])
Q2[,5]
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
Q2<-  Q2[!Q2[,5]=="",]
Q2<-  Q2[!Q2[,5]=="(millions of",]
Q2<-  Q2[!Q2[,5]=="US dollars)",]
Q2<-  Q2[!Q2[,5]=="..",]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[,5]
class(Q2[,5])
Q2[,5]<-as.numeric(Q2[,5])
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
Q2<-  Q2[!Q2[,5]=="",]
Q2<-  Q2[!Q2[,5]=="(millions of",]
Q2<-  Q2[!Q2[,5]=="US dollars)",]
Q2<-  Q2[!Q2[,5]=="..",]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[,5]
Q2[,5]<-  gsub(",","",Q2[,5])
Q2[,5]
Q2[,5]<-as.numeric(Q2[,5])
Q2[,5]
mean(Q2[,5])
names(Q2)
names(Q2)[1]
Q2[1:5,]
grep("^United",Q2[,4])), 3
grep("^United",Q2[,4]))
grep("^United",Q2[,4])
grep("^United",Q2[,4],values=TRUE)
grepl("^United",Q2[,4],values=TRUE)
grep("^United",Q2[,4],value=TRUE)
grep("United$",Q2[,4],value=TRUE)
grep("*united",Q2[,4],value=TRUE)
grep("^United",Q2[,4],value=TRUE)
Q2["0-9{9}",5]
Q2["^0-9{9}",5]
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
Q2<-  Q2[!Q2[,5]=="",]
Q2<-  Q2[!Q2[,5]=="(millions of",]
Q2<-  Q2[!Q2[,5]=="US dollars)",]
Q2<-  Q2[!Q2[,5]=="..",]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[,5]
Q2["0-9{9}",5]
Q2["0-9",5]
Q2[("0-9"),5]
grep("0-9",Q2[,5])
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
Q2[,5]
Q2<-  Q2[!Q2[,5]=="",]
Q2<-  Q2[!Q2[,5]=="(millions of",]
Q2<-  Q2[!Q2[,5]=="US dollars)",]
Q2<-  Q2[!Q2[,5]=="..",]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[,5]
Q2[,5]<-  gsub(",","",Q2[,5])
Q2[,5]
mean(Q2[,5])
mean(as.numeric(Q2[,5])
mean(as.numeric(Q2[,5]))
is.numeric(Q2[,5])
Q2[,5]
Q2[,5]<-as.numeric(Q2[,5])
Q2[,5]
is.numeric(Q2[,5])
is.numeric(Q2[1:190,5])
mean(Q2[,5])
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
str(Q2)
Q2[[,2];Q2[,5]
Q2[,2];Q2[,5]
grep("0-9",Q2[,2])
str(Q2)
grep("(0-9)",Q2[,2])
grep("Ranking",Q2[,2])
Q2[238,5]
grep("[Rr]anking",Q2[,2])
Q2[3,5]
Q2<-  Q2[!Q2[,5]=="",]
Q2<-  Q2[!Q2[,5]=="(millions of",]
Q2<-  Q2[!Q2[,5]=="US dollars)",]
Q2<-  Q2[!Q2[,5]=="..",]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[3,5]
grep("[Rr]anking",Q2[,2])
grep("0-9",Q2[,2])
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
grepl("0-9",Q2[,2],values=TRUE)
grep("0-9",Q2[,2],values=TRUE)
str(Q2)
Q2<-Q2[!Q2[,2]=="",]
Q2[,2]
Q2<-Q2[!Q2[,2]=="Ranking",]
Q2[1:10,2]
Q2[,2]
Q2<-Q2[!Q2[,2]=="(\. | a-zA-Z)",]
Q2<-Q2[!Q2[,2]=="\. | a-zA-Z",]
Q2<-Q2[!Q2[,2]=="a-zA-Z",]
Q2[,2]
Q2[1:190,2]
Q2[1:190,2]
Q2<-Q2[1:190,]
Q2[,5]
Q2[,5]<-as.numeric(Q2[,5])
Q2[,5]
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
Q2<-Q2[!Q2[,2]=="",]
Q2<-Q2[!Q2[,2]=="Ranking",]
Q2<-Q2[1:190,]
Q2[,5]
Q2[,5]<-  gsub(" ","",Q2[,5])
Q2[,5]
Q2[,5]<-  gsub(",","",Q2[,5])
Q2[,5]
Q2[,5]<-as.numeric(Q2[,5])
mean(Q2[,5])
Q2<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE)
Q2[!Q2[,2]=="a-zA-Z",]
Q2[!Q2[,2]=="NA",]
Q2[!Q2[,2]=="^United",]
Q2[!Q2[,2]=="(^United)",]
Q2<-[1:10,2]
Q2[1:10,2]
Q2["[Rr]anking"",2]
Q2["[Rr]anking",2]
Q2[Q2[,2]=="(^United)",]
Q2["a-zA-Z",2]
Q2[1:190,2]
Q2[Q2[,2]==(^"United"),]
Q2[Q2[,2]==("^United"),]
Q2[Q2[,2]=="^United",]
Q2[Q2[,2]=="^United"]
fileUrl="http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download(fileUrl, "./data/GDP190.csv", mode = "wb")
require(downloader)
download(fileUrl, "./data/GDP190.csv", mode = "wb")
Q4<-read.csv("./data/GDP190.csv",stringsAsFactors=FALSE)
Q4.a<-read.csv("./data/GDP190.csv",stringsAsFactors=FALSE)
fileUrl1="http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download(fileUrl1, "./data/EDD.csv", mode = "wb")
Q4.b<-read.csv("./data/EDD.csv",stringsAsFactors=FALSE)
head(Q4.a,2);head(Q4.b,2)
names(Q4.a;names(Q4.b)
names(Q4.a);names(Q4.b)
Q4.a[,2]
Q4.a[,1]
Q4.a<-Q4.a[!Q4.a[,1]=="",]
Q4.a[,1]
Q4.b[,1]
names(Q4.a);names(Q4.b)
mergedData=merge(Q4.a,Q4.b,by.x="X",by.y="CountryCode",all=FALSE)
head(mergedData)
names(Q4.a);names(Q4.b)
names(mergedData)
mergedData[1,]
mergedData[1:10,]
mergedData[10:20,]
names(mergedData)[grepl('June', mergedData)]
names(mergedData)[grepl('June$', mergedData)]
names(mergedData)[grepl("June$", mergedData)]
mergedData[grepl("June$", mergedData)]
grepl("June$", mergedData)
grepl("June$", mergedData[,1])
grepl("June$", mergedData[,1],values=TRUE)
grepl("June$", mergedData[,1])
grepl("June$", mergedData[,2])
grepl("June$", mergedData[,3:4])
grepl("June$", mergedData[,5:10])
grepl("June$", mergedData[,10:15])
grepl("June$", mergedData[,10:20])
grepl("June$", mergedData[,10:30])
grepl("June$", mergedData[,])
grep("June$", mergedData)
grep("June", mergedData)
grep("June", mergedData,values=TRUE)
grep("June", mergedData,value=TRUE)
grep("end of the fiscal June$", mergedData,value=TRUE)
grep("end of the fiscal year", mergedData,value=TRUE)
grep("end of the fiscal year", mergedData,value=TRUE)
grep("fiscal year", mergedData,value=TRUE)
grep("June", mergedData,value=TRUE)
grep("Fiscal year end: June", mergedData,value=TRUE)
grep("Fiscal year end: June", mergedData,value=FALSE)
grep("Fiscal year end: June$", mergedData,value=FALSE)
grep("Fiscal year end: June", mergedData,value=FALSE)
grep("Fiscal year end: & June$", mergedData,value=FALSE)
grep("Fiscal year end: & June$", mergedData,value=TRUE)
grep("Fiscal year end: & June", mergedData,value=TRUE)
grep("Fiscal year end: | June", mergedData,value=TRUE)
grep("Fiscal year end: | June", mergedData,value=TRUE)
grep("Fiscal year end: | June", mergedData,value=FALSE)
grep("+Fiscal year end: | June", mergedData,value=TRUE)
grep("+Fiscal year end: | June", mergedData,value=FALSE)
grep("+Fiscal year end: +June", mergedData,value=TRUE)
grep("+Fiscal year end: +June", mergedData,value=FALSE)
grep("+Fiscal year end: +June$", mergedData,value=TRUE)
grep("+Fiscal year end: +June$", mergedData,value=FALSE)
grep("+Fiscal year end: +June", mergedData,value=FALSE)
grep("(Fiscal year end: June)$", mergedData,value=TRUE)
grep("(Fiscal year end: June$)", mergedData,value=TRUE)
grep("Fiscal year end: June$", mergedData,value=TRUE)
grep("Fiscal year end: June", mergedData,value=TRUE)
grep("Fiscal year end: June.", mergedData,value=TRUE)
grep("Fiscal year end: June.", mergedData,value=FALSE)
grep("Fiscal year end(.*) June.", mergedData,value=TRUE)
grep("Fiscal year end(.*) June.", mergedData,value=FALSE)
grep("June", mergedData,value=TRUE)
grep("June", mergedData,value=FALSE)
grep("Fiscal year" & "June", mergedData,value=FALSE)
grep("Fiscal year & June", mergedData,value=FALSE)
grep("Fiscal year end & June", mergedData,value=FALSE)
grep("Fiscal year end", mergedData,value=TRUE)
ff<-grep("June", mergedData,value=TRUE)
ff
grep("Fiscal year end:", ff, value=TRUE)
grep("Fiscal year end:", ff, value=FALSE)
grep("Fiscal year end: ", ff, value=FALSE)
?levels
?grepl
grep("Fiscal year end:// ", ff, value=FALSE)
ff<-grep("June", mergedData,value=TRUE)
ff
?str
str(mergedData)
names(mergedData)
mergedData[,19]
ff<-grep("June", mergedData[,19],value=TRUE)
ff
grep("June", mergedData[,19],value=FALSE)
ff
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
names(amzn)
sampleTimes = index(amzn) ;sampleTimes
sampleTimes
class(sampleTimes)
weekdays(sampleTimes)
grep("Mondays",weekdays(sampleTimes))
grep("Segunda-feira",weekdays(sampleTimes))
grepl("Segunda-feira",weekdays(sampleTimes))
grepl("Monday",weekdays(sampleTimes))
weekdays(sampleTimes))
weekdays(sampleTimes)
grep("segunda-feira",weekdays(sampleTimes))
grep("segunda-feira",weekdays(sampleTimes),values=FALSE)
grep("segunda-feira",weekdays(sampleTimes),value=FALSE)
grep("segunda-feira",weekdays(sampleTimes),value=TRUE)
sampleTimes
dd<-grep("segunda-feira",weekdays(sampleTimes),value=TRUE)
dd
years(sampleTimes)
year(sampleTimes)
sampleTimes
dd<-grep("2012",weekdays(sampleTimes),value=TRUE)
dd
dd<-grep("2012",sampleTimes,value=TRUE)
dd
dd<-grep("2012",sampleTimes,value=FALSE)
dd
length(dd)
grep("segunda-feira",dd)
dd<-grep("2012",sampleTimes,value=TRUE)
grep("segunda-feira",dd)
dd
grep("segunda-feira",weekdays(dd)
grep("segunda-feira",weekdays(dd))
dd<-as.date(dd,"%d%b%Y")
dd<-as.Date(dd,"%d%b%Y")
dd
dd<-grep("2012",sampleTimes,value=TRUE)
dd
dd<-as.Date(dd,"%Y%m%d")
dd
dd<-grep("2012",sampleTimes,value=TRUE)
class(dd)
dd<-as.Date(dd,"%d%m%Y")
class(dd)
dd
weekdays(sampleTimes)
dd<-grep("2012",sampleTimes,value=TRUE)
length(dd) #250
class(dd)
dd<-grep("2012",as.character(sampleTimes),value=TRUE)
length(dd) #250
class(dd)
dd
dd<-as.Date(dd,"%d%m%Y")
dd
dd<-grep("2012",as.character(sampleTimes),value=TRUE)
length(dd) #250
class(dd)
dd
dd
class(dd)
dd<-as.Date(dd,"%d%m%Y")
dd
dd<-grep("2012",as.character(sampleTimes),value=TRUE)
dd<-as.Date(dd)#,"%d%m%Y")
class(dd)
dd
grep("segunda-feira",weekdays(dd))
length(grep("segunda-feira",weekdays(dd)))
mergedData[,19]
mergedData<-  mergedData[!Q2[,19]=="",]
mergedData<-  mergedData[!mergedData[,19]=="",]
mergedData[,19]
str(mergedData)
str(mergedData[,19])
ff<-grep("June", mergedData[,19],value=TRUE)
ff
grep("June", mergedData[,19],value=FALSE)
ff
grep("Fiscal year end", ff,value=FALSE)
grep("Fiscal year end", ff,value=TRUE)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
airquality<-transform(airqulity, Month = factor(Month))
airquality<-transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(2,3))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
set.seed(10)
x<-rnorm(100)
f<-rep(0:1, each=50)
y<-x+f-f*x+rnorm(100, sd=0.5)
f<-factor(f, labels=c("Group 1","Group 1"))
xyplot(y~x|layout=c(2,1))
xyplot(y~x|f,layout=c(2,1))
f<-factor(f, labels=c("Group 1","Group 2"))
xyplot(y~x|f,layout=c(2,1))
xyplot(y ~ x | f,layout=c(2,1))
f
f<-factor(f, labels=c("Group 1","Group 2"))
f
f<-rep(0:1, each=50)
f
f<-factor(f, labels=c("Group 1","Group 2"))
f
xyplot(y ~ x | f,layout=c(2,1))
xyplot(y ~ x | f, panel=function(x,y,...) {
panel.xyplot(x,y,...)
panel.abline(h=median(y), lty=2)
})
xyplot(y ~ x | f, panel=function(x,y,...) {
panel.xyplot(x,y,...)
panel.lmline(x,y, col=2)
})
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
?trellis.par.set()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
str(mpg)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix<-matrix(rnorm(400), nrow=40)
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar=rep(0.2,4))
heatmap(datamatrix)
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (flipCoin){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0.3),each=5)
}
}
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (coinFlip){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0.3),each=5)
}
}
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (coinFlip){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0.3),each=5)
}
}
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if (coinFlip){
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0, 3),each=5)
}
}
image(1:10,1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
hh<-hclust(dist(dataMatrix))
dataMatrixOrdered<-dataMatrix[hh$order,]
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row Mean", ylab="Row",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column", ylab="Column Mean",pch=19)
par(mfrow=c(1,3), mar=c(2,4,0.1,0.1))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row Mean", ylab="Row",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column", ylab="Column Mean",pch=19)
par(mfrow=c(1,3), mar=c(4,5,2,2))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row Mean", ylab="Row",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column", ylab="Column Mean",pch=19)
library(kernLab)
library(kernlab)
library(Kernlab)
install.packages("kernlab")
library(Kernlab)
library(Kernlab)
data(spam)
library(Kernlab)
library("Kernlab")
library(Kernlab)
install.packages("kernlab")
library(Kernlab)
data(spam)
library(Kernlab)
str(spam[,1:5])
?factor
newActivity[1:10,]
setwd("c:/Users/Moacyr/Dropbox/week2_reproducibleResearch/RepData_PeerAssessment1/activity")
activity<-read.csv("activity.csv", header=TRUE, colClasses=c("integer", "character", "integer"))
resultMean<-aggregate(activityCleaned$steps ~ activityCleaned$date, FUN = mean, data=activityCleaned)
resultMedian<-aggregate(activityCleaned$steps ~ activityCleaned$date, FUN = median, data=activityCleaned)
FinalResult<-data.frame(cbind(resultMean,resultMedian[,2]))
names(FinalResult)<-c("Date", "Mean", "Median")
resultMean<-aggregate(activityCleaned$steps ~ activityCleaned$date, FUN = mean, data=activityCleaned)
activityCleaned<-subset(activity, steps!="NA")
resultMean<-aggregate(activityCleaned$steps ~ activityCleaned$date, FUN = mean, data=activityCleaned)
resultMedian<-aggregate(activityCleaned$steps ~ activityCleaned$date, FUN = median, data=activityCleaned)
FinalResult<-data.frame(cbind(resultMean,resultMedian[,2]))
names(FinalResult)<-c("Date", "Mean", "Median")
stepsFilled<-replace(activity$steps, is.na(activity$steps), mean(activity$steps, na.rm=TRUE))
newActivity<-as.data.frame(cbind(as.numeric(stepsFilled), activity$date))
names(newActivity)<-c("DateFilled", "Date")
head(newActivity)
Histogram of the New filled archive
hist (as.numeric(newActivity[,1]), main="Histogram\n Number of Steps\n filled by global Mean",xlab="# of Steps", col="blue")
resultMeanF<-aggregate(as.numeric(newActivity[,1]) ~ newActivity[,2], FUN = mean, data=newActivity)
resultMedianF<-aggregate(as.numeric(newActivity[,1]) ~ newActivity[,2], FUN = median, data=newActivity)
FinalResultF<-data.frame(cbind(resultMeanF,resultMedianF[,2]))
names(FinalResultF)<-c("Date", "Mean", "Median")
newActivity[1:10,2]
str(newActivity[1:10,2])
newActivity[,2])<-as.Date(as.character(newActivity[,2]))
newActivity[,2]<-as.Date(as.character(newActivity[,2]))
newActivity[,2]
str(newActivity[,2])
format(newActivity[,2], format="%a %B %d %Y")
dim(newActivity[,2])
length(newActivity[,2])
teste<-c(rep,0,17568)
sábsss
for (i in 1:length(newActivity[,2])){
if (newActivity[i,2]=="sáb" | newActivity[i,2]=="dom"){teste[i]<-"weekend"}
}
9504
17568-9504
fVector<-c(rep("weekday",9504),rep("weekend",8064))
fVector
fVector<-as.factor(fVector)
str(fVector)
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
newActivity[,1]<-as.numeric(newActivity[,1])
str(newDataFrame)
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
newActivity[,1]<-as.numeric(as.character(newActivity[,1]))
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
newActivity<-as.data.frame(cbind(as.numeric(stepsFilled), activity$date))
head(newActivity)
str(newActivity)
newActivity[,1]<-as.numeric(as.character(newActivity[,1]))
str(newActivity)
newActivity[,2]<-as.Date(as.character(newActivity[,2]))
str(newActivity)
newDataFrame<-as.data.frame(cbind(newActivity, fVector))
str(newDataFrame)
